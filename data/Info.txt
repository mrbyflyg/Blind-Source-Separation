This is the data corresponding to the Blind Source Separation project for 11755 F23.
You are provided with 3 .mat files. These can be read in MATLAB or python (using scipy/mat73 libraries)
Each mat file contains HDEMG data from the Tibialis anterior muscle (close to shin). The data corresponds to
participants holding a force level (steady force 1) and ramping up the force level (increasing force 1 and
increasing force 2). You have to identify the number of unique sources (motor units) for each of these conditions.

Each mat file has following 2 arrays:
File
-	Out_mat: a 64 x # of samples array, with the time series data corresponding to the HDEMG signals
-	Grid_crds: a 64 x 2 array, with the spatial location of each electrode, the unit is in mm. This is useful
if you are planning to incorporate spatial filters in your method.

The following piece of literature may prove helpful, 
Holobar, Ales, and Damjan Zazula. "Multichannel blind source separation using convolution kernel compensation."
IEEE Transactions on Signal Processing 55.9 (2007): 4487-4496.
https://ieeexplore.ieee.org/abstract/document/4291854


<build_depend>rclpy</build_depend>
  <exec_depend>rclpy</exec_depend>
  <exec_depend>geometry_msgs</exec_depend>

'talker_node = talker.talker_node:main',

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped
class LocalizationPublisher(Node):
    def __init__(self):
        super().__init__('localization_publisher')
        self.publisher_ = self.create_publisher(PoseStamped, 'aruco_pose', 10)
        self.timer = self.create_timer(1, self.timer_callback)
    def timer_callback(self):
        pose_msg = PoseStamped()
        pose_msg.header.stamp = self.get_clock().now().to_msg()
        pose_msg.header.frame_id = 'base_link'
        # Example pose data -- replace with your localization data
        pose_msg.pose.position.x = 1.0
        pose_msg.pose.position.y = 2.0
        pose_msg.pose.position.z = 0.0
        pose_msg.pose.orientation.x = 0.0
        pose_msg.pose.orientation.y = 0.0
        pose_msg.pose.orientation.z = 0.0
        pose_msg.pose.orientation.w = 1.0
        self.publisher_.publish(pose_msg)
        self.get_logger().info(f'Publishing: {pose_msg.pose}')
def main(args=None):
    rclpy.init(args=args)
    localization_publisher = LocalizationPublisher()
    rclpy.spin(localization_publisher)
    localization_publisher.destroy_node()
    rclpy.shutdown()
